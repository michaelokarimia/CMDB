#!/usr/bin/env python

# Name:     CrucialMusicDataBase (CMDB.py)
# Author:   Matthew Titcombe
# Date:     19/12/2010
# Version:  2.3
# Changes:  See Version log.txt

# This file was initially generated by tk_happy (To save time programming a GUI)

# tk_happy generated code. DO NOT EDIT THE FOLLOWING. section "imports"
from Tkinter import *
import datetime,re,tkFileDialog
from nltk import clean_html
from tempfile import mkstemp
from shutil import move
from os import remove, close
from urllib import urlopen

class config:
    #Configuration of all variable and regular expressions used in the program
    def __init__(self):
        self.dbFile = 'cmdb_current.txt'
        self.soldFile = 'cmdb_sold.txt'
        #Add new
        self.itemRE = re.compile('(result_0)(.*)(href=\")(.*)(\"> <img onload)')
        self.contentRE = re.compile('(canonical)(.*)')
        self.artist_TitleRE = re.compile('(<title>)(.*)(: )(.*)(: Amazon.co.uk: Music</title>)')
        self.labelRE = re.compile('(<li><b>Label:</b> )(.*)(</li>)(.*)(<li><b>ASIN)')
        self.tracksRE = re.compile('(Track Listings)(.*)(Track Listings)(.*)(</tbody></table>)')
        #Sold
        self.qtyRE = re.compile('(.*\t.*\t.*\t.*\t.*\t)(.*)(\t)(.*\t.*\t.*\t.*\t.*\t.*\t.*\t.*\t.*\t.*\t.*\t.*\t.*\t.*\t.*\t.*\t.*\t.*\n)')
        
class _CMDB:
    def __init__(self, master,config):
        self.initComplete = 0
        frame = Frame(master, width=485, height=530)
        frame.pack()
        self.master = master
        self.x, self.y, self.w, self.h = -1,-1,-1,-1

        self.master.bind('<Enter>', self.bindConfigure)
        self.master.title("Crucial Music Database (V2.3)")

        self.Add_Button = Button(self.master,text="Get Info", width="15")
        self.Add_Button.place(x=282, y=30, width=101, height=27)
        self.Add_Button.bind("<ButtonRelease-1>", self.Add_Button_Click)

        self.Img1_Button = Button(self.master,text="image 1", width="15")
        self.Img1_Button.place(x=126, y=395, width=70, height=27)
        self.Img1_Button.bind("<ButtonRelease-1>", self.Img1_Button_Click)
        self.img1dir = '' 

        self.Img2_Button = Button(self.master,text="image 2", width="15")
        self.Img2_Button.place(x=126, y=430, width=70, height=28)
        self.Img2_Button.bind("<ButtonRelease-1>", self.Img2_Button_Click)
        self.img2dir = ''

        self.Sold_Button = Button(self.master,text="Sold item?", relief="raised", width="15")
        self.Sold_Button.place(x=282, y=0, width=101, height=27)
        self.Sold_Button.bind("<ButtonRelease-1>", self.Sold_Button_Click)

        self.Submit_Button = Button(self.master,text="SUBMIT", width="15")
        self.Submit_Button.place(x=250, y=493, width=200, height=28)
        self.Submit_Button.bind("<ButtonRelease-1>", self.Submit_Button_Click)

        self.Is_Classic_Checkbutton = Checkbutton(self.master,text="Is Classical?", anchor="w", width="15")
        self.Is_Classic_Checkbutton.place(x=126, y=360, width=92, height=28)
        self.Is_Classic_Checkbutton_StringVar = StringVar()
        self.Is_Classic_Checkbutton.configure(variable=self.Is_Classic_Checkbutton_StringVar, onvalue="TRUE", offvalue="FALSE")
        self.Is_Classic_Checkbutton_StringVar_traceName = self.Is_Classic_Checkbutton_StringVar.trace_variable("w", self.Is_Classic_Checkbutton_StringVar_Callback)
        self.Is_Classic_Checkbutton.deselect()

        self.Is_Promo_Checkbutton = Checkbutton(self.master,text="Is Promo?", anchor="w", relief="flat", width="15")
        self.Is_Promo_Checkbutton.place(x=126, y=325, width=91, height=27)
        self.Is_Promo_Checkbutton_StringVar = StringVar()
        self.Is_Promo_Checkbutton.configure(variable=self.Is_Promo_Checkbutton_StringVar, onvalue="TRUE", offvalue="FALSE")
        self.Is_Promo_Checkbutton_StringVar_traceName = self.Is_Promo_Checkbutton_StringVar.trace_variable("w", self.Is_Promo_Checkbutton_StringVar_Callback)
        self.Is_Promo_Checkbutton.deselect()

        self.Sku_Entry = Entry(self.master,font="TkTextFont", width="15")
        self.Sku_Entry.place(x=127, y=0, width=151, height=23)
        self.Sku_Entry_StringVar = StringVar()
        self.Sku_Entry.configure(textvariable=self.Sku_Entry_StringVar)
        self.Sku_Entry_StringVar.set("")
        self.Sku_Entry_StringVar_traceName = self.Sku_Entry_StringVar.trace_variable("w", self.Sku_Entry_StringVar_Callback)

        self.Barcode_Entry = Entry(self.master,width="15")
        self.Barcode_Entry.place(x=126, y=30, width=151, height=24)
        self.Barcode_Entry_StringVar = StringVar()
        self.Barcode_Entry.configure(textvariable=self.Barcode_Entry_StringVar)
        self.Barcode_Entry_StringVar.set("")
        self.Barcode_Entry.bind("<Return>", self.Add_Button_Click)
        self.Barcode_Entry_StringVar_traceName = self.Barcode_Entry_StringVar.trace_variable("w", self.Barcode_Entry_StringVar_Callback)

        self.Artist_Entry = Entry(self.master,width="15")
        self.Artist_Entry.place(x=126, y=66, width=154, height=25)
        self.Artist_Entry_StringVar = StringVar()
        self.Artist_Entry.configure(textvariable=self.Artist_Entry_StringVar)
        self.Artist_Entry_StringVar.set("")
        self.Artist_Entry_StringVar_traceName = self.Artist_Entry_StringVar.trace_variable("w", self.Artist_Entry_StringVar_Callback)

        self.Title_Entry = Entry(self.master,width="15")
        self.Title_Entry.place(x=126, y=92, width=154, height=25)
        self.Title_Entry_StringVar = StringVar()
        self.Title_Entry.configure(textvariable=self.Title_Entry_StringVar)
        self.Title_Entry_StringVar.set("")
        self.Title_Entry_StringVar_traceName = self.Title_Entry_StringVar.trace_variable("w", self.Title_Entry_StringVar_Callback)

        self.Qty_Entry = Entry(self.master,width="15")
        self.Qty_Entry.place(x=126, y=120, width=153, height=23)
        self.Qty_Entry_StringVar = StringVar()
        self.Qty_Entry.configure(textvariable=self.Qty_Entry_StringVar)
        self.Qty_Entry_StringVar.set("")
        self.Qty_Entry_StringVar_traceName = self.Qty_Entry_StringVar.trace_variable("w", self.Qty_Entry_StringVar_Callback)

        self.Price_Entry = Entry(self.master,width="15")
        self.Price_Entry.place(x=126, y=144, width=153, height=24)
        self.Price_Entry_StringVar = StringVar()
        self.Price_Entry.configure(textvariable=self.Price_Entry_StringVar)
        self.Price_Entry_StringVar.set("")
        self.Price_Entry_StringVar_traceName = self.Price_Entry_StringVar.trace_variable("w", self.Price_Entry_StringVar_Callback)

        self.Label_Entry = Entry(self.master,width="15")
        self.Label_Entry.place(x=126, y=175, width=154, height=25)
        self.Label_Entry_StringVar = StringVar()
        self.Label_Entry.configure(textvariable=self.Label_Entry_StringVar)
        self.Label_Entry_StringVar.set("")
        self.Label_Entry_StringVar_traceName = self.Label_Entry_StringVar.trace_variable("w", self.Label_Entry_StringVar_Callback)

        self.Tracks_Entry = Entry(self.master,width="15")
        self.Tracks_Entry.place(x=126, y=235, width=354, height=25)
        self.Tracks_Entry_StringVar = StringVar()
        self.Tracks_Entry.configure(textvariable=self.Tracks_Entry_StringVar)
        self.Tracks_Entry_StringVar.set("")
        self.Tracks_Entry_StringVar_traceName = self.Tracks_Entry_StringVar.trace_variable("w", self.Tracks_Entry_StringVar_Callback)

        self.Con_Desc_Entry = Entry(self.master,width="15")
        self.Con_Desc_Entry.place(x=126, y=259, width=355, height=26)
        self.Con_Desc_Entry_StringVar = StringVar()
        self.Con_Desc_Entry.configure(textvariable=self.Con_Desc_Entry_StringVar)
        self.Con_Desc_Entry_StringVar.set("")
        self.Con_Desc_Entry_StringVar_traceName = self.Con_Desc_Entry_StringVar.trace_variable("w", self.Con_Desc_Entry_StringVar_Callback)

        self.Item_Desc_Entry = Entry(self.master,width="15")
        self.Item_Desc_Entry.place(x=126, y=291, width=355, height=25)
        self.Item_Desc_Entry_StringVar = StringVar()
        self.Item_Desc_Entry.configure(textvariable=self.Item_Desc_Entry_StringVar)
        self.Item_Desc_Entry_StringVar.set('Will dispatch item from the UK within 24 hours of payment, 100% guarantee to please')
        self.Item_Desc_Entry_StringVar_traceName = self.Item_Desc_Entry_StringVar.trace_variable("w", self.Item_Desc_Entry_StringVar_Callback)

        self.Artist_Label = Label(self.master,text="Artist:", anchor="e", width="15")
        self.Artist_Label.place(x=0, y=66, width=126, height=22)
        
        self.Con_Label = Label(self.master,text="CD and Vinyl:", anchor="n", width="15")
        self.Con_Label.place(x=324, y=63, width=126, height=22)        

        self.vinyl_con_Label = Label(self.master,text="Sleeve:", anchor="w", width="15")
        self.vinyl_con_Label.place(x=282, y=63, width=40, height=22)
        
        self.Barcode_Label = Label(self.master,text="Barcode:", relief="flat", anchor="e", width="15")
        self.Barcode_Label.place(x=0, y=30, width=126, height=23)

        self.Con_Desc_Label = Label(self.master,text="Condition Description:", anchor="e", width="15")
        self.Con_Desc_Label.place(x=0, y=259, width=126, height=22)

        self.Img_Label = Label(self.master,text="Images:", width="15")
        self.Img_Label.place(x=0, y=390, width=126, height=23)

        self.Item_Desc_Label = Label(self.master,text="Item Description:", anchor="e", width="15")
        self.Item_Desc_Label.place(x=0, y=291, width=126, height=22)

        self.Label = Label(self.master,text="Label:", anchor="e", width="15")
        self.Label.place(x=0, y=174, width=126, height=22)

        self.Price_Label = Label(self.master,text="Price:", anchor="e", width="15")
        self.Price_Label.place(x=0, y=147, width=126, height=22)

        self.Qty_Label = Label(self.master,text="Quantity:", anchor="e", width="15")
        self.Qty_Label.place(x=0, y=120, width=126, height=22)

        self.Sku_Label = Label(self.master, text="sku:", width="15", anchor="e", justify="right")
        self.Sku_Label.place(x=0, y=0, width=126, height=22)

        self.Title_Label = Label(self.master,text="Title:", anchor="e", width="15")
        self.Title_Label.place(x=0, y=92, width=126, height=22)

        self.Tracks_Label = Label(self.master,text="Tracks:", anchor="e", width="15")
        self.Tracks_Label.place(x=0, y=235, width=126, height=22)
        
        self.errMsg = StringVar()
        self.Lab_Error_Label = Label(self.master,text="", width="15",fg="red",textvariable=self.errMsg)
        self.Lab_Error_Label.place(x=12, y=493, width=200, height=31)
                                    

        lbframe = Frame( self.master )
        self.Con_Listbox_frame = lbframe
        self.Con_Listbox = Listbox(lbframe, width="15", selectmode="single",exportselection=0)
        self.Con_Listbox.pack(side=LEFT, fill=BOTH, expand=1)

        self.Con_Listbox_frame.place(x=282, y=80, width=41, height=151)
        self.Con_Listbox.bind("<ButtonRelease-1>", self.Con_Listbox_Click)

        self.Con_Listbox.insert (0,'New')
        self.Con_Listbox.insert (1,'EX')
        self.Con_Listbox.insert (2,'VG')
        self.Con_Listbox.insert (3,'G')
        self.Con_Listbox.insert (4,'F')
        self.Con_Listbox.insert (5,'P')

        lbframe = Frame( self.master )
        self.Con_Amazon_Listbox_frame = lbframe
        self.Con_Amazon_Listbox = Listbox(lbframe, width="15", selectmode="single",exportselection=0)
        self.Con_Amazon_Listbox.pack(side=LEFT, fill=BOTH, expand=1)

        self.Con_Amazon_Listbox_frame.place(x=324, y=80, width=156, height=151)
        self.Con_Amazon_Listbox.bind("<ButtonRelease-1>", self.Con_Amazon_Listbox_Click)

        self.Con_Amazon_Listbox.insert (0,'Used; Like New')
        self.Con_Amazon_Listbox.insert (1,'Used; Very Good')
        self.Con_Amazon_Listbox.insert (2,'Used; Good ')
        self.Con_Amazon_Listbox.insert (3,'Used; Acceptable')
        self.Con_Amazon_Listbox.insert (4,'Collectible; Like New')
        self.Con_Amazon_Listbox.insert (5,'Collectible; Very Good')
        self.Con_Amazon_Listbox.insert (6,'Collectible; Good')
        self.Con_Amazon_Listbox.insert (7,'Collectible; Acceptable')
        self.Con_Amazon_Listbox.insert (8,'New')
        
        lbframe = Frame( self.master )
        self.Format_Listbox_frame = lbframe
        self.Format_Listbox = Listbox(lbframe, width="15", selectmode="single",exportselection=0)
        self.Format_Listbox.pack(side=LEFT, fill=BOTH, expand=1)

        self.Format_Listbox_frame.place(x=230, y=325, width=101, height=156)
        self.Format_Listbox.bind("<ButtonRelease-1>", self.Format_Listbox_Click)
        
        self.Format_Listbox.insert (0,'CD single')
        self.Format_Listbox.insert (1,'CD album')
        self.Format_Listbox.insert (2,'7" single')
        self.Format_Listbox.insert (3,'EP')
        self.Format_Listbox.insert (4,'12" single')
        self.Format_Listbox.insert (5,'Vinyl LP')
        self.Format_Listbox.insert (6,'cassette')
        self.Format_Listbox.insert (7,'78')
        self.Format_Listbox.insert (8,'Picture Disk') 
                
        self.fileRE = re.compile('(.*Public\/)(.*\..*)')
        self.Con_Amazon_Listbox.selection_set('0')
        self.Con_Listbox.selection_set('0')
        self.Format_Listbox.selection_set('0')
        
        self.master.resizable(0,0) # Linux may not respect this

    def bindConfigure(self, event):
        if not self.initComplete:
            self.master.bind("<Configure>", self.Master_Configure)
            self.initComplete = 1

    def Master_Configure(self, event):
        pass
        if event.widget != self.master:
            if self.w != -1:
                return
        x = int(self.master.winfo_x())
        y = int(self.master.winfo_y())
        w = int(self.master.winfo_width())
        h = int(self.master.winfo_height())
        if (self.x, self.y, self.w, self.h) == (-1,-1,-1,-1):
            self.x, self.y, self.w, self.h = x,y,w,h

        if self.w!=w or self.h!=h:
            print "Master reconfigured... make resize adjustments"
            self.w=w
            self.h=h

    def Add_Button_Click(self, event): #click method for component ID=22
        pass
        self.get_info()

    def Img1_Button_Click(self, event): #click method for component ID=19
        pass
	url = open('/config.txt',r);
        self.img1dir =  url.readline() + self.fileRE.search(tkFileDialog.askopenfilename()).group(2) 

    def Img2_Button_Click(self, event): #click method for component ID=20
        pass
	url = open('/config.txt',r);
        self.img2dir = url.readline() + self.fileRE.search(tkFileDialog.askopenfilename()).group(2) 

    def Sold_Button_Click(self, event): #click method for component ID=21
        pass
        SKU =  self.Sku_Entry_StringVar.get().lower()
        if not SKU == '':
            self.sold(SKU)
        else:
            print 'yay'

    def Submit_Button_Click(self, event): #click method for component ID=23
        pass
        self.submit()

    def Con_Listbox_Click(self, event): #click method for component ID=12
        pass

    def Con_Amazon_Listbox_Click(self, event): #click method for component ID=11
        pass
        self.con_desc()

    def Format_Listbox_Click(self, event): #click method for component ID=17
        pass

    def Is_Classic_Checkbutton_StringVar_Callback(self, varName, index, mode):
        pass

    def Is_Promo_Checkbutton_StringVar_Callback(self, varName, index, mode):
        pass
      
    def Artist_Entry_StringVar_Callback(self, varName, index, mode):
        pass
        
    # tk_happy generated code. DO NOT EDIT THE FOLLOWING. section "Barcode_Entry_StringVar_Callback"
    def Barcode_Entry_StringVar_Callback(self, varName, index, mode):
        pass
    
    def Con_Desc_Entry_StringVar_Callback(self, varName, index, mode):
        pass
        
    def Item_Desc_Entry_StringVar_Callback(self, varName, index, mode):
        pass

    def Label_Entry_StringVar_Callback(self, varName, index, mode):
        pass
    def Price_Entry_StringVar_Callback(self, varName, index, mode):
        pass

    def Qty_Entry_StringVar_Callback(self, varName, index, mode):
        pass

    def Sku_Entry_StringVar_Callback(self, varName, index, mode):
        pass

    def Title_Entry_StringVar_Callback(self, varName, index, mode):
        pass

    def Tracks_Entry_StringVar_Callback(self, varName, index, mode):
        pass

    def submit(self): 
        if self.validate() == 'TRUE':
            #Get Attributes
            Artist =  self.Artist_Entry_StringVar.get()
            Title =  self.Title_Entry_StringVar.get()
            Barcode = self.Barcode_Entry_StringVar.get()
            Format = str(self.Format_Listbox.get(self.Format_Listbox.curselection()[0]))
            Is_Promo =  self.Is_Promo_Checkbutton_StringVar.get()
            Qty = self.Qty_Entry_StringVar.get()
            Price = self.Price_Entry_StringVar.get()
            SKU =  self.Sku_Entry_StringVar.get().lower()
            
            if self.Con_Amazon_Listbox.curselection()[0] == '0':
                Condition_Amazon = '1'
                Condition_Other = 'ex'
            if self.Con_Amazon_Listbox.curselection()[0] == '1': 
                Condition_Amazon = '2'
                Condition_Other = 'vg'
            if self.Con_Amazon_Listbox.curselection()[0] == '2': 
                Condition_Amazon = '3'
                Condition_Other = 'g'
            if self.Con_Amazon_Listbox.curselection()[0] == '3': 
                Condition_Amazon = '4'
                Condition_Other = 'f'
            if self.Con_Amazon_Listbox.curselection()[0] == '4':
                Condition_Amazon = '5'
                Condition_Other = 'ex'         
            if self.Con_Amazon_Listbox.curselection()[0] == '5': 
                Condition_Amazon = '6'
                Condition_Other = 'vg'             
            if self.Con_Amazon_Listbox.curselection()[0] == '6': 
                Condition_Amazon = '7'
                Condition_Other = 'g'             
            if self.Con_Amazon_Listbox.curselection()[0] == '7': 
                Condition_Amazon = '8'
                Condition_Other = 'f'              
            if self.Con_Amazon_Listbox.curselection()[0] == '8': 
                Condition_Amazon = '11'
                Condition_Other =  'NEW'             

            
            grading_cover = str(self.Con_Listbox.get(self.Con_Listbox.curselection()[0]))
            
            
            
            
            Condition_Description =  self.Con_Desc_Entry_StringVar.get()
            Track_Listing = self.Tracks_Entry_StringVar.get()
            IS_Classical = self.Is_Classic_Checkbutton_StringVar.get()
            Genre = ''
            Label = self.Label_Entry_StringVar.get()
            
            img1=self.img1dir    
            img2=self.img2dir  
            img3=''    
            img4=''    
            Item_Description = self.Item_Desc_Entry_StringVar.get()
            Date_Added = datetime.date.today()
            AMAZON_FORMAT = ''
            is_Vinyl = ''
            
            
            #Amazon Format 
            if self.Format_Listbox.curselection()[0] == '0':
                AMAZON_FORMAT = 'AudioCD'
            elif self.Format_Listbox.curselection()[0] == '1':
                AMAZON_FORMAT = 'AudioCD'
            elif self.Format_Listbox.curselection()[0] == '2':
                AMAZON_FORMAT = '45'
                is_Vinyl = '1'
            elif self.Format_Listbox.curselection()[0] == '3':
                AMAZON_FORMAT = 'EP'
                is_Vinyl = '1'
            elif self.Format_Listbox.curselection()[0] == '4':
                AMAZON_FORMAT = '12_single'
                is_Vinyl = '1'
            elif self.Format_Listbox.curselection()[0] == '5':
                AMAZON_FORMAT = 'LP'
                is_Vinyl = '1'
            elif self.Format_Listbox.curselection()[0] == '6':
                AMAZON_FORMAT = 'cassette'
            elif self.Format_Listbox.curselection()[0] == '7':
                AMAZON_FORMAT = '78'
                is_Vinyl = '1'
            elif self.Format_Listbox.curselection()[0] == '8':
                AMAZON_FORMAT = 'other'
                is_Vinyl = '1'
            ebayTracks=''
                    
            t = '\t'
            
            file = Artist + t +	Title+ t +Barcode+ t +Format + t + Is_Promo	+ t +Qty+ t +Price + t +SKU + t +Condition_Amazon+ t + Condition_Other  + t +Condition_Description + t +Track_Listing + t +IS_Classical + t +Genre+ t + Label + t +img1+ t + img2 + t +img3 + t +img4 + t +Item_Description+ t + str(Date_Added) + t +AMAZON_FORMAT + t +is_Vinyl + t +ebayTracks + t + grading_cover +'\n'
     
            self.save(file,config.dbFile)
            print 'Item sucessfully added to database file'
              #Reset Al attributes
            self.Artist_Entry_StringVar.set('')
            self.Title_Entry_StringVar.set('')
            self.Barcode_Entry_StringVar.set('')
            self.Format_Listbox.selection_set('0')
            self.Is_Promo_Checkbutton_StringVar.set('FALSE')
            self.Qty_Entry_StringVar.set('1')
            self.Price_Entry_StringVar.set('')
            self.Sku_Entry_StringVar.set('')
            self.Con_Amazon_Listbox.selection_set('0')
            self.Con_Listbox.selection_set('0')
            self.Con_Desc_Entry_StringVar.set('')
            self.Tracks_Entry_StringVar.set('')
            self.Is_Classic_Checkbutton_StringVar.set('FALSE')
            Genre = ''
            self.Label_Entry_StringVar.set('')
            self.img1dir=''  
            self.img2dir=''
            self.Item_Desc_Entry_StringVar.set('Will dispatch item from the UK within 24 hours of payment, 100% guarantee to please')
            datetime.date.today()
            AMAZON_FORMAT = ''
            is_Vinyl = ''
            self.errMsg.set('')
            self.Sku_Entry.focus()
        else:
            print 'Sorry There seems to be a problem processing you submit request.',
            print 'Please cowntact Matt if you think this is a mistake; otherwise follow the onscreen instructions'
 
    def con_desc(self):   
        if self.Con_Desc_Entry_StringVar.get() == '':
            if self.Con_Amazon_Listbox.curselection()[0] == '0':
                self.Con_Desc_Entry_StringVar.set('Used and in excellent condition')
            if self.Con_Amazon_Listbox.curselection()[0] == '1':
                self.Con_Desc_Entry_StringVar.set('Used and in very Good condition')
            if self.Con_Amazon_Listbox.curselection()[0] == '2':
                self.Con_Desc_Entry_StringVar.set('Used and in good condition')
            if self.Con_Amazon_Listbox.curselection()[0] == '3':
                self.Con_Desc_Entry_StringVar.set('Used and fair/acceptable condition')
            if self.Con_Amazon_Listbox.curselection()[0] == '4':
                self.Con_Desc_Entry_StringVar.set('excellent condition')
            if self.Con_Amazon_Listbox.curselection()[0] == '5':
                self.Con_Desc_Entry_StringVar.set('Very Good condition')
            if self.Con_Amazon_Listbox.curselection()[0] == '6':
                self.Con_Desc_Entry_StringVar.set('Good condition')
            if self.Con_Amazon_Listbox.curselection()[0] == '7':
                self.Con_Desc_Entry_StringVar.set('In fair/acceptable condition')
            if self.Con_Amazon_Listbox.curselection()[0] == '8':
                self.Con_Desc_Entry_StringVar.set('Brand new item')
       
    def get_info(self):
        query = self.Barcode_Entry_StringVar.get()
        data = IE(query,config)
        print query
        print data.itemInfo
        #Put attributes (where they exist) into correct text boxes
        if 'artist' in data.itemInfo:
            self.Artist_Entry_StringVar.set(data.itemInfo['artist'])
        if 'label' in data.itemInfo:
            self.Label_Entry_StringVar.set(data.itemInfo['label'])
        self.Qty_Entry_StringVar.set(1)
        if 'title' in data.itemInfo:    
            self.Title_Entry_StringVar.set(data.itemInfo['title'])
        if 'tracks' in data.itemInfo:
            self.Tracks_Entry_StringVar.set(data.itemInfo['tracks'])
    
    def save(self,item,file):
        fh = open(file, 'r').read() #Change name here to actual database
        fh = fh + item
        f = open(file, 'w')
        f.write(fh)
    
    def sold(self,s):
        f = open(config.dbFile, 'r').read() #Change name here to actual database
        string = '(\n)(.*%s.*\n)' %s
        skuRE = re.compile(string)
        if skuRE.search(f):
            line = skuRE.search(f).group(2)
            newLineRE = config.qtyRE.search(line)
            if int(config.qtyRE.search(line).group(2)) > 1:
                self.replace(config.dbFile,line,(newLineRE.group(1) + str((int(newLineRE.group(2))-1)) +newLineRE.group(3)+newLineRE.group(4)))
            else:
                self.replace(config
                .dbFile,line,'')
            self.save(str(datetime.date.today()) + '\t'+ line,config.soldFile)
            print 'Moved item to sold and, if appliccable, reduced quantity'
            
    def replace(self,file, pattern, subst):
        #Create temp file
        fh, abs_path = mkstemp()
        new_file = open(abs_path,'w')
        old_file = open(file)
        for line in old_file:
            new_file.write(line.replace(pattern, subst))
        #close temp file
        new_file.close()
        close(fh)
        old_file.close()
        #Remove original file
        remove(file)
        #Move new file
        move(abs_path, file)
        
    def validate(self):
        print 'Validaiton will go here and return True if it passes or False (Error messages will be printed)'
        Validationresult = 'TRUE'
        
        #Check all list boxes have been selected
        if self.Format_Listbox.curselection() ==():
            self.errMsg.set('Select a media Format')
        if self.Con_Amazon_Listbox.curselection() ==():
            Validationresult = 'FALSE'
            self.errMsg.set('Select an Amazon Condition')
        if self.Con_Listbox.curselection() == ():
            Validationresult = 'FALSE'
            self.errMsg.set('Select a condition')            
        #Artist, Title, Quantity, Price, SKU, Condition Description
        if self.Artist_Entry_StringVar.get() == '':
            Validationresult = 'FALSE' 
            self.errMsg.set('Enter an artist') 
        if self.Title_Entry_StringVar.get() == '':
            Validationresult = 'FALSE'        
            self.errMsg.set('Enter a Title') 
        if self.Qty_Entry_StringVar.get() == '':
            Validationresult = 'FALSE'  
            self.errMsg.set('Enter a quantity')             
        if self.Price_Entry_StringVar.get() == '':
            Validationresult = 'FALSE'
            self.errMsg.set('Enter a price')             
        if self.Sku_Entry_StringVar.get().lower() == '':
            Validationresult = 'FALSE'       
            self.errMsg.set('Enter a product SKU') 
        if self.Con_Desc_Entry_StringVar.get() == '':
            Validationresult = 'FALSE'
            self.errMsg.set('Enter Condition Description') 
        return Validationresult    

class IE:
    def __init__(self,barcode,config):
        url = 'http://www.amazon.co.uk/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=' + str(barcode) + '&x=0&y=0'
        searchPage = urlopen(url).read()
        searchPage = searchPage.replace('\n', '').replace('\t', '').replace('\r','')
        itemURL = self.getItemURL(str(searchPage))
        self.itemInfo = self.getinfo(itemURL)
    
    def getItemURL(self,page):
        itemURL = config.itemRE.search(page).group(4)
        return itemURL
   
    def getinfo(self,url):
        res={}
        itemPage = urlopen(url).read()
        itemPage = itemPage.replace('\n', '').replace('\t', '').replace('\r','')


        #self.contentRE = re.compile('(canonical)(.*)(<h2>Product Description</h2>)')
        #print 'content',
        #print config.contentRE.search(itemPage)

        content = config.contentRE.search(itemPage).group(2)      
        
        artist_title = config.artist_TitleRE.search(content)
        label = config.labelRE.search(content)
        tracks = config.tracksRE.search(content)
        if artist_title:
            res['title'] = artist_title.group(2)
        if artist_title:
            res['artist'] = artist_title.group(4)

        if label:
            res['label'] = label.group(2)
        if tracks:
            tracks = tracks.group(4)
            res['tracks'] = clean_html(tracks)
        return res          
   
    def saveInfo(self,res):
        print 'saved'
        f = open('res.txt', 'w')
        f.write(res)
    
def main(config):
    root = Tk()
    app = _CMDB(root,config)
    root.mainloop()

if __name__ == '__main__':
    config = config()
    main(config)
    
#Split submit into submit and reset methods (maybe have reset method run at start up?)
#Add error reporting function
#Load SKUs to prevent multiple skus being used
